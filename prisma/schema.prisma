// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PATIENT
  DOCTOR
  ADMIN
}

enum Status {
  SCHEDULED
  CONFIRMED
  CANCELLED
}

model User {
  id          String        @id @default(cuid())
  email       String        @unique
  password    String
  role        Role          @default(PATIENT)
  name        String
  phone       String?
  Message     Message[]
  Appointment Appointment[]

  // Relacionamento 1:1 com Doctor e Patient
  doctor  Doctor?
  patient Patient?

  @@map("users")
}

model Doctor {
  id                          String   @id @default(cuid())
  specialization              String[]
  availableTimes              String[]
  graduateDiploma             String
  medicalResidencyCertificate String
  professionalRegistration    String
  certificateOfSpecialization String
  clinicAddress               String

  // Relacionamento 1:1 com User
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  Appointment Appointment[]

  @@map("doctors")
}

model Patient {
  id               String    @id @default(cuid())
  birthDate        DateTime?
  medicalHistory   String?
  emergencyContact String?

  // Relacionamento 1:1 com User
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  Appointment Appointment[]

  @@map("patients")
}

model Appointment {
  id          String   @id @default(cuid())
  scheduledAt DateTime
  status      Status
  Chat        Chat?
  User        User     @relation(fields: [userId], references: [id])
  userId      String
  Doctor      Doctor   @relation(fields: [doctorId], references: [id])
  doctorId    String
  Patient     Patient  @relation(fields: [patientId], references: [id])
  patientId   String

  @@map("appointments")
}

model Chat {
  id            String       @id @default(cuid())
  messages      Message[]
  Appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  appointmentId String?      @unique

  @@map("chats")
}

model Message {
  id       String   @id @default(cuid())
  sender   User     @relation(fields: [senderId], references: [id])
  senderId String
  Chat     Chat     @relation(fields: [chatId], references: [id])
  chatId   String
  sent     DateTime

  @@map("messages")
}
